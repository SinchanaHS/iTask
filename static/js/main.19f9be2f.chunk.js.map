{"version":3,"sources":["Videos.js","App.js","serviceWorker.js","index.js"],"names":["Videos","video1","video2","number","useState","videos","setVideos","window","innerWidth","width","setWidth","innerHeight","height","setHeight","useEffect","eachImgArea","imgWidth","Math","sqrt","i","push","className","map","src","alt","App","setNumber","submit","setSubmit","type","min","max","onChange","e","target","value","onClick","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQA2DeA,MAvDf,YAAyC,IAAxBC,EAAuB,EAAvBA,OAAOC,EAAgB,EAAhBA,OAAOC,EAAS,EAATA,OAAS,EAITC,mBAAS,IAJA,mBAI7BC,EAJ6B,KAItBC,EAJsB,OAKXF,mBAASG,OAAOC,YALL,mBAK7BC,EAL6B,KAKvBC,EALuB,OAMTN,mBAASG,OAAOI,aANP,mBAM7BC,EAN6B,KAMtBC,EANsB,KAmCpC,OA1BAC,qBAAU,WACN,IAAMT,EAAS,GAEf,GADAC,EAAUD,GACPF,EAAS,EAAG,CACX,IACIY,EADQR,OAAOC,WAAaD,OAAOI,YAChBR,EACnBa,EAAWC,KAAKC,KAAKH,GAAa,KAE1CL,EAASM,GACTH,EAAUG,GAIV,IAAI,IAAIG,EAAE,EAAEA,EAAEhB,EAAOgB,IACjBd,EAAOe,KAAKnB,KACZkB,EACKhB,GACDE,EAAOe,KAAKlB,GAIpBI,EAAUD,KAGZ,CAACF,IAGC,yBAAKkB,UAAU,cACdhB,EAAOiB,KAAI,SAAAjB,GAEX,OAAO,yBACPI,MAAOA,EACPG,OAAQA,EAIXW,IAAKlB,EACLmB,IAAI,aCdKC,MA7Bf,WAAgB,IAAD,EACerB,mBAAS,GADxB,mBACND,EADM,KACEuB,EADF,OAEctB,mBAAS,GAFvB,mBAENuB,EAFM,KAECC,EAFD,KASb,OACE,yBAAKP,UAAU,OAEd,2BAAOQ,KAAK,SAASC,IAAI,IAAIC,IAAK,GAAGC,SAAU,SAACC,GAAD,OAAOP,EAAUO,EAAEC,OAAOC,UACzE,2BAAON,KAAK,SAASM,MAAM,SAASC,QATvC,WACER,EAAUzB,GACVkC,QAAQC,IAAI,MAAMnC,MAQhBkC,QAAQC,IAAI,SAASnC,GACrBkC,QAAQC,IAAI,SAASX,GAErBA,EAAO,kBAAC,EAAD,CACLxB,OAAQwB,EACR1B,OAAO,wCACPC,OAAO,2FAEL,OCjBUqC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.19f9be2f.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react'\r\nimport './Videos.css'\r\n\r\n\r\nfunction Videos({video1,video2,number}) {\r\n\r\n\r\n    \r\n    const [videos,setVideos] = useState([]);\r\n    const [width,setWidth] = useState(window.innerWidth);\r\n    const [height,setHeight] = useState(window.innerHeight);\r\n    \r\n\r\n    useEffect(() =>{\r\n        const videos = [];\r\n        setVideos(videos)\r\n        if(number > 1) {\r\n            var area = (window.innerWidth)*(window.innerHeight);\r\n            var eachImgArea = area/number;\r\n            var imgWidth = Math.sqrt(eachImgArea)+'px';\r\n        \r\n        setWidth(imgWidth);\r\n        setHeight(imgWidth);\r\n\r\n        }\r\n            \r\n        for(var i=0;i<number;i++){\r\n            videos.push(video1)\r\n            i++\r\n            if(i<number){\r\n                videos.push(video2)\r\n            }\r\n\r\n        }\r\n        setVideos(videos);\r\n       \r\n      \r\n    },[number])\r\n\r\n    return (\r\n        <div className='Vid__style'>\r\n        {videos.map(videos => {\r\n\r\n         return(<img \r\n         width={width}\r\n         height={height}\r\n        \r\n         \r\n    \r\n      src={videos}\r\n      alt=\"new\"\r\n      />)  \r\n        \r\n        })}\r\n    </div> \r\n    );\r\n   \r\n}\r\n\r\nexport default Videos;","import React,{useState} from 'react';\nimport './App.css';\nimport Videos from './Videos'\n\n\n\n\nfunction App() {\n  const [number, setNumber] = useState(1);\n  const [submit,setSubmit] = useState(1);\n\n  function handleSubmit(){\n    setSubmit(number)\n    console.log(\"num\",number)\n  }\n  \n  return (\n    <div className=\"App\">\n     \n     <input type=\"number\" min=\"1\" max= \"\" onChange={(e) => setNumber(e.target.value)}  />\n     <input type=\"submit\" value=\"submit\" onClick={handleSubmit} />\n     {console.log(\"number\",number)}\n     {console.log(\"submit\",submit)}\n     \n     {submit?<Videos \n        number={submit}\n        video1=\"http://158.58.130.148/mjpg/video.mjpg\"\n        video2=\"http://210.148.114.53/-wvhttp-01-/GetOneShot?image_size=640x480&frame_count=1000000000\"\n\n       />:null}\n    \n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}